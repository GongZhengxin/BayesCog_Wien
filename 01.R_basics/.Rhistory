sprintf('sub%02i/raw_data_sub%04.2f.txt',10,9)
sprintf('sub%02i/raw_data_sub%05.2f.txt',10,9)
sprintf('sub%02i/raw_data_sub%06.2f.txt',10,9)
sprintf('sub%02i/raw_data_sub%06.2f.txt',10,9)
sprintf('sub%02d/raw_data_sub%06.2f.txt',10,9)
sprintf('sub%03d/raw_data_sub%06.2f.txt',10,9)
sprintf('sub%03i/raw_data_sub%06.2f.txt',10,9)
sprintf('sub%3i/raw_data_sub%06.2f.txt',10,9)
sprintf('sub%03i/raw_data_sub%06.2f.txt',10,9)
sprintf('sub%03i/raw_data_sub%06.2f.txt',10,9)
sprintf('sub%03d/raw_data_sub%06.2f.txt',10,9)
sprintf('sub%03d/raw_data_sub%07.2f.txt',10,9)
sprintf('sub%03d/raw_data_sub%03.2f.txt',10,9)
sprintf('sub%03d/raw_data_sub%03.3f.txt',10,9)
ns = 10
data_dir = '_data/RL_raw_data'
rawdata = c();
for (s in 1:ns) {
sub_file = file.path(data_dir, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = rbind(rawdata, sub_data)
}
dim(rawdata)
rawdata = rawdata[complete.cases(rawdata),]
dim(rawdata)
rawdata$choice == rawdata$correct
(rawdata$choice == rawdata$correct) * 1.0
rawdata$accuracy = (rawdata$choice == rawdata$correct) * 1.0
head(rawdara)
head(rawdata)
aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)
acc_mean = aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)[,2]
aggregate(rawdata$accuracy, by = list(rawdata$trialID), mean)
#------------------------------------------------------------------------------
# read descriptive data
load('_data/RL_descriptive.RData')
descriptive
#------------------------------------------------------------------------------
# read descriptive data
load('_data/RL_descriptive.RData')
descriptive$acc = acc_mean
df = descriptive
df
#------------------------------------------------------------------------------
# read descriptive data
load('_data/RL_descriptive.RData')
descriptive
descriptive$acc = acc_mean
descriptive$acc = acc_mean
df = descriptive
#------------------------------------------------------------------------------
# one sample t-test , to test if 'acc' is above chance level
t.test(df$acc, mu = 0.5)
# simple correlation, to test if IQ is correlated with acc
cor.test(df$IQ, df$acc)
df
g1 <- ggplot(df, aes(IQ,acc))
library
#------------------------------------------------------------------------------
## plot the scatter and the regression line
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
# scatter plot
g1 <- ggplot(df, aes(IQ,acc))
g1
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
g1 <- ggplot(df, aes(IQ,acc))
g1
g1 <- g1 + geom_jitter(width=0.0, height=0.0, size=5, colour='skyblue', alpha=0.95)
g1
g1 + geom_jitter(width=0.0, height=0.0, size=5, colour='skyblue', alpha=0.1)
g1 + geom_jitter(width=0.0, height=0.0, size=5, colour='skyblue', alpha=0.1)
g1 + geom_jitter(width=0.0, height=0.0, size=5, colour='skyblue', alpha=0)
g1 + geom_jitter(width=0.0, height=0.0, size=5, colour='skyblue', alpha=0.9)
g1 + geom_jitter(width=0.0, height=0.0, size=5, colour='red', alpha=0.9)
g1 + geom_jitter(width=0.0, height=0.0, size=1, colour='red', alpha=0.9)
g1 + geom_jitter(width=0.0, height=0.0, size=1, colour='red', fill = 'green', alpha=0.9)
g1 + geom_jitter(width=1, height=1, size=1, colour='red', fill = 'green', alpha=0.9)
g1 + geom_jitter(width=1, height=1, size=1, colour='red', fill = 'green', alpha=0.9)
g1 + geom_jitter(width=1, height=1, size=1, colour='red', fill = 'green', alpha=0.9)
g1 + geom_jitter(width=1, height=1, size=1, colour='red', fill = 'green', alpha=0.9)
g1 + geom_jitter(width=1, height=1, size=1, colour='red', fill = 'green', alpha=0.9)
g1 + geom_jitter(width=1, height=1, size=1, colour='red', fill = 'green', alpha=0.9)
g1 <- g1 + myconfig + labs(x = 'IQ', y = 'Choice accuracy (%)')
g1
g1 <- g1 + geom_smooth(method = "lm", se = T, colour='skyblue3')
g1
g1 <- ggplot(df, aes(Age,acc))
g1 <- g1 + geom_jitter(width=0.0, height=0.0, size=5, colour='skyblue', alpha=0.95)
g1 <- g1 + myconfig + labs(x = 'Age', y = 'Choice accuracy (%)')
# add the regression line
g1 <- g1 + geom_smooth(method = "lm", se = T, colour='skyblue3')
g1
cor.test(df$Age, df$acc)
cor.test(df$IQ, df$acc)
0.8631401 ^2
# scatter plot
g1 <- ggplot(df, aes(IQ,acc))
?gemo_jitter
?geom_jitter
g1 + geom_jitter(width=0.0, height=0.0, size=2, colour='skyblue', alpha=0.95)
g1 + geom_jitter(width=0.0, height=0.0, size=3, colour='skyblue', alpha=0.95)
g1 + geom_jitter(width=0.0, height=0.0, size=3, colour='red', alpha=0.95)
g1 + geom_jitter(width=0.0, height=0.0, size=3, colour='red', alpha=0.5)
g1 + geom_jitter(width=0.0, height=0.0, size=3, colour='red', alpha=0.1)
g1 + geom_jitter(width=0.0, height=0.0, size=3, colour='red', fill='green', alpha=0.1)
g1 + geom_jitter(width=0.0, height=0.0, size=3, colour='red', alpha=0.1)
g1 + geom_jitter(width=0.0, height=0.0, size=3, colour='red', alpha=0.9)
g1 + geom_jitter(width=0.0, height=0.0, size=3, colour='skybule3', alpha=0.9)
g1 + geom_jitter(width=0.0, height=0.0, size=3, colour='skyblue3', alpha=0.9)
g1 + geom_jitter(width=0.0, height=0.0, size=3, colour='skyblue3', alpha=0.3)
g1 + geom_jitter(width=0.0, height=0.0, size=10, colour='skyblue3', alpha=0.3)
g1 + geom_jitter(width=0.0, height=0.0, size=10, colour='red', alpha=0.3)
g1 + geom_jitter(width=0.0, height=0.0, size=10, colour='red', alpha=0.1)
g1 + geom_jitter(width=0.0, height=0.0, size=10, colour='red', alpha=0.95)
## simple regression
fit1 = lm(acc ~ IQ, data = df)
fit2 = lm(acc ~ Age, data = df)
fit3 = lm(acc ~ IQ + Age, data = df)
fit4 = lm(acc ~ IQ * Age, data = df)
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit1)
s = summary(fit1)
s
class(s)
s$r.squared
s$adj.r.squared
summary(fit1)$r.squared
summary(fit1)$r.squared
summary(fit2)$r.squared
summary(fit3)$r.squared
summary(fit4)$r.squared
round(summary(fit1)$r.squared, 2)
round(summary(fit2)$r.squared, 2)
round(summary(fit3)$r.squared, 2)
round(summary(fit4)$r.squared, 2)
L = list(fit1, fit2, fit3, fit4)
sapply(L, FUN = function(x){round(summary(x)$r.squared, 2)} )
sapply(L, FUN = function(x){round(summary(x)$adj,r.squared, 2)} )
sapply(L, FUN = function(x){round(summary(x)$adj.r.squared, 2)} )
AIC(fit1, fit2,fit3, fit4)
anova(fit1, fit2,fit3, fit4)
anova(fit1, fit2)
anova(fit1, fit3)
anova(fit1, fit4)
BIC(fit1, fit2,fit3, fit4)
AIC(fit1, fit2,fit3, fit4)
# =============================================================================
#### Exercise VII ####
# =============================================================================
library(MASS)
# =============================================================================
#### Exercise VII ####
# =============================================================================
install.packages('MASS')
install.packages("MASS")
library(MASS)
str(UScrime)
t.test(UScrime$U1, UScrime$U2, paired=TRUE)
t.test(UScrime$U1, UScrime$U2, paired=F)
ls()
x
mean(x)
x.mean
reshape2
tidywise
library(MASS)
str(UScrime)
UScrime$U1
UScrime$U2
t.test(UScrime$U1, UScrime$U2, paired=TRUE)
UScrime$U1
UScrime$U1
UScrime$U2
#install.packages('BayesFactor')
#------------------------------------------------------------------------------
# Calculate Bayes Factor
library(BayesFactor)
data(sleep)
class(sleep)
str(sleep)
sleep$extra[1:10]
sleep$extra[11:20]
sleep[1:10,]
sleep[11:20,]
t.test(x = sleep$extra[1:10],y=sleep$extra[11:20], paired=TRUE)
ttestBF(x = sleep$extra[1:10],y=sleep$extra[11:20], paired=TRUE)
source('E:/teaching/RL_R_Tromso_2018/R_intro_workshop/01.R_basics/_scripts/R_basics_master.R')
ns = 10
data_dir = '_data/RL_raw_data'
rawdata = c();
for (s in 1:ns) {
sub_file = file.path(, sprintf('sub%02i/raw_data_sub%i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = rbind(rawdata, sub_data)
}
s=1
sub_file = file.path(, sprintf('sub%02i/raw_data_sub%i.txt',s,s))
sub_file = file.path(data_dir, sprintf('sub%02i/raw_data_sub%i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
for (s in 1:ns) {
sub_file = file.path(data_dir, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = rbind(rawdata, sub_data)
}
rawdata
load('_data/RL_descriptive.RData')
descriptive$acc = acc_mean
df = descriptive
acc_mean = aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)[,2]
rawdata = rawdata[complete.cases(rawdata),]
rawdata$accuracy = (rawdata$choice == rawdata$correct) * 1.0
acc_mean = aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)[,2]
load('_data/RL_descriptive.RData')
descriptive$acc = acc_mean
df = descriptive
t.test(df$acc, mu = 0.5)
# simple correlation, to test if IQ is correlated with acc
cor.test(df$IQ, df$acc)
library(ggplot2)
myconfig <- theme_bw(base_size = 20) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank() )
# scatter plot
g1 <- ggplot(df, aes(IQ,acc))
g1 <- g1 + geom_jitter(width=0.0, height=0.0, size=5, colour='skyblue', alpha=0.95)
g1 <- g1 + myconfig + labs(x = 'IQ', y = 'Choice accuracy (%)')
# add the regression line
g1 <- g1 + geom_smooth(method = "lm", se = T, colour='skyblue3')
g1
fit1 = lm(acc ~ IQ, data = df)
summary(fit1)
fit1 = lm(acc ~ IQ, data = df)
fit2 = lm(acc ~ Age, data = df)
fit3 = lm(acc ~ IQ + Age, data = df)
fit4 = lm(acc ~ IQ * Age, data = df) # IQ + Age + IQ:Age
anova(fit1, fit2, fit3, fit4 )
AIC(fit1, fit2, fit3, fit4 )
L = list(fit1,fit2,fit3,fit4)
sapply(L, function(x){round(summary(x)$r.squared,2)})
sapply(L, function(x){round(summary(x)$adj.r.squared,2)})
a1 <- 5
a2 <- as.integer(a1)
class(a1)
class(a2)
b1 <- 'Hello World!'
b2 <- "Hello World!"
class(b1)
class(b2)
c1 <- T; c2 <- TRUE; c3 <- F; c4 <- FALSE
class(c1)
f <- factor(letters[c(1, 1, 2, 2, 3:10)])
class(f)
v1 <- 1:12
v2 <- c(2,4,1,5,1,6, 13:18)
v3 <- c(rep('aa',4), rep('bb',4), rep('cc',4))
class(v1)
class(v2)
class(v3)
print(v3)
m1 <- matrix(v1, nrow=3, ncol=4)
m2 <- matrix(v1, nrow=3, ncol=4, byrow = T)
arr <- array(v1, dim=c(2,2,3))
class(m1)
class(arr)
df <- data.frame(v1=v1, v2=v2, v3=v3, f=f)
class(df)
str(df)
class(df$v1)
class(df$v2)
class(df$v3)
class(df$f)
install.packages("ggplot2")
month_name <- format(ISOdate(2018,1:12,1),"%B")
month_name
month_name <- format(ISOdate(2019,1:12,1),"%B")
month_name
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", t, ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", round(t,3), ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", round(t,3), ", t > 2/3. \n")
} else {
cat("t =", round(t,3), ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", round(t,3), ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", round(t,3), ", t > 2/3. \n")
} else {
cat("t =", round(t,3), ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", round(t,3), ", t <= 1/3. \n")
} else if (t > 2/3) {
cat("t =", round(t,3), ", t > 2/3. \n")
} else {
cat("t =", round(t,3), ", 1/3 < t <= 2/3. \n")
}
month_name <- format(ISOdate(2018,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat("The month is", month_name[j], "\n")
}
library(ggplot2)
detach('pachage:ggplot2')
detach('package:ggplot2')
data_dir = ('_data/RL_raw_data/sub01/raw_data_sub01.txt')
data = read.table(data_dir, header = T, sep = ",")
sum(complete.cases(data))
dim(data[complete.cases(data),])
data = data[complete.cases(data),]
data = data[complete.cases(data),]
data[1:10,]
data = data[1:10,]
data
ns = 10
data_dir = '_data/RL_raw_data'
rawdata = c();
for (s in 1:ns) {
sub_file = file.path(data_dir, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = rbind(rawdata, sub_data)
}
rawdata = rawdata[complete.cases(rawdata),]
rawdata$accuracy = (rawdata$choice == rawdata$correct) * 1.0
acc_mean = aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)[,2]
load('_data/RL_descriptive.RData')
View(descriptive)
descriptive
load('_data/RL_descriptive.RData')
descriptive
descriptive$acc = acc_mean
descriptive
t.test(df$acc, mu = 0.5)
df = descriptive
t.test(df$acc, mu = 0.5)
cor.test(df$IQ, df$acc)
aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)
acc_mean = aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)[,2]
t <- runif(1)
if (t <= 1/3) {
cat("t =", , ", t <= 1/3. \n")
} else if () {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
cat("t =", t, ", t <= 1/3. \n")
cat("t =", t, ", t > 2/3. \n")
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", t, ", t <= 1/3. \n")
} else if (t>2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", t, ", t <= 1/3. \n")
} else if (t>2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", t, ", t <= 1/3. \n")
} else if (t>2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", t, ", t <= 1/3. \n")
} else if (t>2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", t, ", t <= 1/3. \n")
} else if (t>2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", t, ", t <= 1/3. \n")
} else if (t>2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", t, ", t <= 1/3. \n")
} else if (t>2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
t <- runif(1) # random number between 0 and 1
if (t <= 1/3) {
cat("t =", t, ", t <= 1/3. \n")
} else if (t>2/3) {
cat("t =", t, ", t > 2/3. \n")
} else {
cat("t =", t, ", 1/3 < t <= 2/3. \n")
}
month_name <- format(ISOdate(2019,1:12,1),"%B")
month_name
month_name <- format(ISOdate(2019,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat("This month is", month_namep[j])
}
month_name <- format(ISOdate(2019,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat("This month is", month_name[j])
}
month_name <- format(ISOdate(2019,1:12,1),"%B")
for (j in 1:length(month_name) ) {
cat("This month is", month_name[j], '\n')
}
ns = 10
data_dir = '_data/RL_raw_data'
rawdata = c();
for (s in 1:ns) {
sub_file = file.path(, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = rbind(rawdata, sub_data)
}
rawdata = rawdata[complete.cases(rawdata),]
rawdata$accuracy = (rawdata$choice == rawdata$correct) * 1.0
acc_mean = aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)[,2]
ns = 10
data_dir = '_data/RL_raw_data'
rawdata = c();
for (s in 1:ns) {
sub_file = file.path(, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = rbind(rawdata, sub_data)
}
for (s in 1:ns) {
sub_file = file.path(, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = rbind(rawdata, sub_data)
}
sub_file = file.path(, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
s    = 1
sub_file = file.path(, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sprintf('sub%02i/raw_data_sub%02i.txt',s,s)
sub_file = file.path(data_dir, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_file
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = c();
rawdata
ns = 10
data_dir = '_data/RL_raw_data'
rawdata = c();
for (s in 1:ns) {
sub_file = file.path(data_dir, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = rbind(rawdata, sub_data)
}
rawdata
dim(rawdata)
rawdata = rawdata[complete.cases(rawdata),]
dim(rawdata)
t =  c(T, T , F, T)
sum(t)
mean(t)
aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)[,2]
ns = 10
data_dir = '_data/RL_raw_data'
rawdata = c();
for (s in 1:ns) {
sub_file = file.path(data_dir, sprintf('sub%02i/raw_data_sub%02i.txt',s,s))
sub_data = read.table(sub_file, header = T, sep = ",")
rawdata = rbind(rawdata, sub_data)
}
rawdata = rawdata[complete.cases(rawdata),]
rawdata$accuracy = (rawdata$choice == rawdata$correct) * 1.0
aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)[,2]
aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)
acc_mean = aggregate(rawdata$accuracy, by = list(rawdata$subjID), mean)[,2]
install.packages('brms')
install.packages('tidyverse')
library(brms)
